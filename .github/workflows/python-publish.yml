# This workflow builds the application for multiple platforms and uploads them as release assets.

name: Build and Release Application

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write # Required to write release assets

jobs:
  build-and-upload:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            asset_name: VSingerBoard-macOS.zip
            asset_content_type: application/zip
          - os: ubuntu-latest
            asset_name: VSingerBoard-Linux.tar.gz
            asset_content_type: application/gzip
          - os: windows-latest
            asset_name: VSingerBoard-Windows.zip
            asset_content_type: application/zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv package manager
        run: pip install uv

      - name: Install project dependencies with uv
        # Reads dependencies from pyproject.toml
        run: uv sync

      - name: Install Linux system dependencies (for pywebview)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev

      - name: Build the application
        run: uv run setup.py py2app

      - name: Package the application for macOS
        if: runner.os == 'macOS'
        # Use ditto for macOS to correctly handle .app bundles
        run: ditto -c -k --sequesterRsrc --keepParent dist/main.app ${{ matrix.asset_name }}

      - name: Package the application for Linux
        if: runner.os == 'Linux'
        run: tar -czvf ${{ matrix.asset_name }} -C dist/ .

      - name: Package the application for Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: Compress-Archive -Path dist/* -DestinationPath ${{ matrix.asset_name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: ${{ matrix.asset_content_type }}
