# This workflow builds the application for multiple platforms using PyInstaller and uploads them as release assets.

name: Build and Release Application

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write # Required to write release assets

jobs:
  build-and-upload:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            asset_name: VSingerBoard-macOS.zip
            asset_content_type: application/zip
          - os: windows-latest
            asset_name: VSingerBoard-Windows.zip
            asset_content_type: application/zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv package manager
        run: pip install uv

      - name: Install project dependencies with uv
        # uv sync installs dependencies from uv.lock, based on pyproject.toml
        run: uv sync

      - name: Install PyInstaller
        run: uv pip install pyinstaller

      - name: Build the application with PyInstaller
        run: uv run pyinstaller VSingerBoard.spec

      - name: Package the application for macOS
        if: runner.os == 'macOS'
        # Use ditto for macOS to correctly handle .app bundles
        run: ditto -c -k --sequesterRsrc --keepParent dist/VSingerBoard.app ${{ matrix.asset_name }}

      - name: Package the application for Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: Compress-Archive -Path dist/VSingerBoard/* -DestinationPath ${{ matrix.asset_name }}

      - name: Upload Release Asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: ${{ matrix.asset_content_type }}