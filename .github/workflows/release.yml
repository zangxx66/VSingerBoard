# This workflow builds the application for multiple platforms and architectures,
# then uploads the artifacts to a GitHub Release.

name: Release Application

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write # Required to write release assets

jobs:
  build-and-upload:
    name: Build on ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Prevent other jobs from being cancelled if one fails
      matrix:
        include:
          # macOS Builds
          - os: macos-15
            arch: arm64
          - os: macos-13
            arch: x86_64
          # Linux Build
          - os: ubuntu-latest
            arch: x86_64
          # Windows Build
          - os: windows-latest
            arch: x86_64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv package manager
        run: pip install uv

      - name: Install project dependencies with uv
        run: uv sync

      - name: Install PyInstaller
        run: uv pip install pyinstaller

      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-gi python3-gi-cairo gir1.2-gtk-3.0 gir1.2-webkit2-4.1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build frontend assets
        shell: bash
        run: |
          rm -rf wwwroot
          npm ci -C frontend
          npm run build -C frontend

      - name: Build the application with PyInstaller
        run: uv run pyinstaller VSingerBoard.spec

      - name: Package and Name Artifact (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          TAG=$(echo "${{ github.ref_name }}" | sed 's/v//')
          ASSET_NAME="VSingerBoard-macOS-${{ matrix.arch }}-$TAG.zip"
          ditto -c -k --sequesterRsrc --keepParent dist/VSingerBoard.app "$ASSET_NAME"
          echo "ASSET_NAME=$ASSET_NAME" >> $GITHUB_ENV

      - name: Package and Name Artifact (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          TAG=$(echo "${{ github.ref_name }}" | sed 's/v//')
          ASSET_NAME="VSingerBoard-Linux-${{ matrix.arch }}-$TAG.tar.gz"
          tar -czvf "$ASSET_NAME" -C dist/VSingerBoard .
          echo "ASSET_NAME=$ASSET_NAME" >> $GITHUB_ENV

      - name: Package and Name Artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $TAG = "${{ github.ref_name }}" -replace "^v",""
          $ASSET_NAME = "VSingerBoard-Windows-${{ matrix.arch }}-$TAG.zip"
          Compress-Archive -Path dist/VSingerBoard/* -DestinationPath $ASSET_NAME
          echo "ASSET_NAME=$ASSET_NAME" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload Release Asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.ASSET_NAME }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream
